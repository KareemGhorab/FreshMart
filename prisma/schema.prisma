generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  hashedPassword String?
  role           Role
  accounts       Account[]
  sessions       Session[]
  cartId         Int?      @map("cart_id")
  Review         Review[]
  Cart           Cart[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cart {
  id       Int       @id
  user     User?     @relation(fields: [userId], references: [id])
  userId   String?   @map("user_id")
  products Product[]
}

model Product {
  id          Int      @id
  name        String
  description String?
  price       Float
  discount    Float?
  reviews     Review[]
  totalReview Int      @map("total_review")
  Cart        Cart?    @relation(fields: [cartId], references: [id])
  cartId      Int?     @map("cart_id")
}

model Review {
  id        Int     @id
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @map("user_id")
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
  rating    Int
  comment   String?
}

model BlogPost {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
}

model EmailSubscription {
  id    Int    @id @default(autoincrement())
  email String @unique
}

enum Role {
  USER
  ADMIN
}
